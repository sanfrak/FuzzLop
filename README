// README.MD
// This is the instruction for running the FuzzLop

// RUN INSTRUCTION

1. Prerequisites:
	to run the FuzzerLop software, the following packages are needed:

	1. AFL (2.52b)
		http://lcamtuf.coredump.cx/afl/
	2. AFLFast
		https://github.com/mboehme/aflfast
	3. LibFuzzer
		this is a part of clang 6.x.
	4. Qt Creator
		https://www.qt.io/download

	The program can run only after all four prerequisites are installed and properlly configured.
	This program is developed and run on Linux 16.04 x64.

	*caution:
		1) AFL need to be configured properly as it may have core_pattern error message first time
		2) LibFuzzer only comes with clang 6.x, which is only available on 64-bit OS.
		3) Qt 5.x may or may not have issue with Ubuntu 18.04. It may require mesa-dev packages.

2. Run the GUI
	The instruction and demo of running the GUI is in the project final report, Section 3.


// SOURCE FILE STRUCTURE

In this tarball, there are two folders, ./fuzzlop and ./target

1. ./fuzzlop:
	1) ./fuzzlop/4-1QDialogDemo
		This directory contains the source code for the design of FuzzLop GUI, this project can be opened by Qt Creator 5.x.

	2) ./fuzzlop/build:
		This directory is the default building path for FuzzLop project. The files are generated by Qt Creator using Qmake.

		a. ./fuzzlop/build/scripts:
		This directory contains the scripts calling the fuzzer engines and the generated text files which stores the user configurations.

			
			i. pwd.txt
				This file stores the user configuration defined in "set configuration" part of the GUI.

			ii. mod*.sh
				mod1.sh - mod4.sh are four bash scripts which make the target application and run the fuzzers. It is called when user click "run" button in GUI.

			iii. stop.sh
				This bash script terminatees all the fuzzers running. It is called when user click "stop" button in GUI.

2. ./target:
	1) ./target/fuzzgoat:
		This directory contains the example target for fuzzing. fuzzgoat is described in the final report of this project.

		a. ./target/fuzzgoat/in
			This is the example input folder for fuzzing. This folder contains seeds, and can not be empty!

		b. ./target/fuzzgoat/out
			This is the example output folder for fuzzing. This folder contains all fuzzers and their information. This folder is created on the run.

		c. ./target/fuzzgoat/crashes
			This is the example folder which stores the crash information. This folder contains all unique crrashes found by each fuzzer. This folder is created when user click "get crash list" in GUI.

	2) ./target/seed:
		This directory is generated on-the-run. When LibFuzzer is called, it will generate seed for hybrid fuzzing, all the interesting seeds will be extracted and stored here.

	3) ./target/get_seed.sh & gen_seed_new.py
		These two scripts are used to pass configurations to LibFuzzer, generate seeds and extract them.
